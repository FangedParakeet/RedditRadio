<% if flash[:notice] %>
  $('#notice').html("<%= j(flash[:notice]) %>");
  $('#notice').fadeIn();
  setTimeout(function(){$('#notice').fadeOut();}, 2000);
<% else %>
  window.allEmbeds = <%= raw @embeds %>;
	window.allTitles = <%= raw @titles %>;
	window.allSubs = <%= raw @subs %>;
	window.allTypes = <%= raw @types %>;
	window.allPermalinks = <%= raw @permalinks %>;
	window.mediaCount = 1;
	first_type = allTypes[0];
	$('#permalink').html('<a rel="external" target="blank" href="'+allPermalinks[0]+'">'+allTitles[0]+'</a>');
	$('#subreddit').html('<a rel="external" target="blank" href="http://reddit.com/r/'+allSubs[0]+'">/r/'+allSubs[0]+'</a>');
	if(first_type == "yt"){
	  <% if cookies[:repeat] && @types[0] == 'yt' %>
      $('#vim').hide();
      $('#sc').hide();
      $('#yt').show();
	    player.loadVideoById({videoId: '<%= j(@embeds.first) %>'});
	    playVideo();	    
	  <% else %>
  	  $('#vim').hide();
  	  $('#sc').hide();
      $('#yt').show();
  	  $('#yt').append('<div id="player"></div>');
  	  // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = '/jqt/lib/iframe_api.js';
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        function onYouTubeIframeAPIReady() {
          window.player = new YT.Player('player', {
            height: '390px',
            width: '100%',
      			fs: '1',
            videoId: '' + allEmbeds[0],
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange,
              'onError': onPlayerError
            }
          });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
          event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
          if (event.data == YT.PlayerState.ENDED) {
      			if (allEmbeds.length == mediaCount) {
    					mediaCount = 0;
    				}
    				var nextEmbed = allEmbeds[mediaCount];
    				var nextTitle = allTitles[mediaCount];
    				var nextSub = allSubs[mediaCount];
    				var nextType = allTypes[mediaCount];
    				var nextPermalink = allPermalinks[mediaCount];
    				$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
    				mediaCount = mediaCount + 1;
          }
        }
        function onPlayerError(event) {
          var notice;
    			if (allEmbeds.length == mediaCount) {
    				mediaCount = 0;
    			}
    			var nextEmbed = allEmbeds[mediaCount];
    			var nextTitle = allTitles[mediaCount];
    			var nextSub = allSubs[mediaCount];
    			var nextType = allTypes[mediaCount];
    			var nextPermalink = allPermalinks[mediaCount];
    			switch(event.data) {
    				case 2:
    					notice = "Something went wrong with this video. Sorry. :(";
    					break;
    				case 5:
    				  notice = "This video cannot be played on mobile. Sorry. :(";
    				  break;
    				case 100:
    					notice = "This video was not found. Sorry. :(";
    					break;
    				case 101:
    					notice = "The meanie who owns this video has banned embeds. Sorry. :(";
    					break;
    				case 150:
    					notice = "The meanie who owns this video has banned embeds. Sorry. :(";
    					break;
    				default:
    					notice = "Something went kaput. Sorry. :(";
    					break;
    			}
    			$('#broken_notice').html(notice);
    			$('#broken_notice').show();
    			setTimeout(function(){
    				$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
    				mediaCount = mediaCount + 1;
    				$('#broken_notice').hide();
    			}, 2500);
    			
        }
        function stopVideo() {
          player.stopVideo();
        }   
        function playVideo() {
          player.playVideo();
        }
      <% end %>
      <% if @types[0] == 'yt' %>
        <% cookies[:repeat] = { value: 'yes', domain: :all} %>
      <% end %>
      
	}
	else if(first_type == "vimeo") {
	  $(document).ready(function() {
	    $('#vim').html('<iframe id="vimeoplayer" src="<%= j(@embeds.first) %>" width="100%" height="390px" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>');
	    $('#yt').hide();
	    $('#sc').hide();
	    $('#vim').show();
			var iframe = $('#vim iframe')[0], vimplayer = $f(iframe);
			
			// When the player is ready, add listeners for pause, finish, and playProgress
			vimplayer.addEvent('ready', function() {
				vimplayer.api('play');
		    vimplayer.addEvent('finish', onFinish);
			});

			function onFinish(id) {
				if (allEmbeds.length == mediaCount) {
					mediaCount = 0;
				}
				var nextEmbed = allEmbeds[mediaCount];
				var nextTitle = allTitles[mediaCount];
				var nextSub = allSubs[mediaCount];
				var nextType = allTypes[mediaCount];
				var nextPermalink = allPermalinks[mediaCount];
				$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
				mediaCount = mediaCount + 1;
			}
		});
	}
	else if(first_type == "soundcloud") {
	  $('#sc').html('<iframe id="sc-widget" width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F<%= j(@embeds.first) %>&show_artwork=true"></iframe>');
	  $('#yt').hide();
	  $('#vim').hide();
	  $('#sc').show();
	  
	  (function(){
	    var songsLast;
	    var songIndex;
	    
	    function getLength(objects) {
	      songsLast = objects.length - 1;
	    }
	    
	    function getIndex(index) {
	      songIndex = index;
	    }
	    
      var widgetIframe = document.getElementById('sc-widget'), widget = SC.Widget(widgetIframe);

      widget.bind(SC.Widget.Events.READY, function() {
        widget.play();
        widget.getSounds(getLength);
      });
      
      widget.bind(SC.Widget.Events.FINISH, function() {
        widget.getCurrentSoundIndex(getIndex);
        if (songIndex != songsLast) {
          widget.next();
        }
        else {
          if (allEmbeds.length == mediaCount) {
      			mediaCount = 0;
      		}
      		var nextEmbed = allEmbeds[mediaCount];
      		var nextTitle = allTitles[mediaCount];
      		var nextSub = allSubs[mediaCount];
      		var nextType = allTypes[mediaCount];
      		var nextPermalink = allPermalinks[mediaCount];
      		$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
      		mediaCount = mediaCount + 1;
      		$('#sc').empty();
        }
      });
      
      widget.bind(SC.Widget.Events.ERROR, function(){
        var notice = "Something went kaput. Sorry. :(";
  			if (allEmbeds.length == mediaCount) {
  				mediaCount = 0;
  			}
  			var nextEmbed = allEmbeds[mediaCount];
  			var nextTitle = allTitles[mediaCount];
  			var nextSub = allSubs[mediaCount];
  			var nextType = allTypes[mediaCount];
  			var nextPermalink = allPermalinks[mediaCount];
  			$('#broken_notice').html(notice);
  			$('#broken_notice').show();
  			setTimeout(function(){
  				$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
  				mediaCount = mediaCount + 1;
  				$('#broken_notice').hide();
  			}, 2500);
      });

    }());
    
	}
	
	$('#next_mobile').click(function(){
	  if(allTypes[mediaCount-1] == 'yt'){
	    stopVideo();
	  }
	  else if(allTypes[mediaCount-1] == 'vimeo'){
	    $('#vim').empty();
	  }
	  else if(allTypes[mediaCount-1] == 'soundcloud'){
	    $('#sc').empty();
	  }
	  if (allEmbeds.length == mediaCount) {
			mediaCount = 0;
		}
		var nextEmbed = allEmbeds[mediaCount];
		var nextTitle = allTitles[mediaCount];
		var nextSub = allSubs[mediaCount];
		var nextType = allTypes[mediaCount];
		var nextPermalink = allPermalinks[mediaCount];
		$.get('nextmob', {embed: nextEmbed, title: nextTitle, sub: nextSub, type: nextType, permalink: nextPermalink});
		mediaCount = mediaCount + 1;
	});	
	
	$('#escape').click(function() {
	  if(allTypes[mediaCount-1] == 'yt'){
	    stopVideo();
	  }
	  else if(allTypes[mediaCount-1] == 'vimeo'){
	    $('#vim').empty();
	  }
	  else if(allTypes[mediaCount-1] == 'soundcloud'){
	    $('#sc').empty();
	  }
	  $('#permalink').empty();
	  $('#subreddit').empty();
	});
  jQT.goTo('#shuffler', 'slideleft');
  
  
<% end %>

  
